1. 객체지향이란 무엇인가요? :
프로그래머들이 프로그래밍을 더 쉽고 체계적으로 할 수 있는 방법론 입니다.
보다 적은 명령으로 다양한 것들을 묶음으로 캡슐화하여 일을 시킬 수 있게 하기 위해
상위 부모클래스를 둔다던가 인터페이스를 두고 이를 사용하게 합니다.

2. 객체지향 프로그래밍의 장점을 설명해주세요 :
묶음으로 체계화하고 상위 부모클래스나 인터페이스로 공통적인 부분을 처리하여
프로그래머가 매우 압축된 코딩을 할 수 있으며 객체지향의 장점인 은닉성으로
어딘가의 변화가 연쇄적으로 하위에 영향을 주지 않아서 유지보수가 쉽습니다.

3. 객체 지향적 설계 원칙이란? :
SOLID
단일책임원칙 : 모든 클래스는 하나의 책임만 가져야한다.
개방폐쇄원칙 : 기존 코드를 변경하지 않으면서 새로운 기능을 추가할 수 있어야한다.
리스코프치환원칙 : 자식클래스가 언제나 자신의 부모클래스를 대체할 수 있다.
인터페이스분리원칙 : 한 클래스는 사용하지 않는 인터페이스는 구현하지 말아야한다.
의존역전원칙 : 의존관계를 맺을 때 변화하기 쉽지 않고 자주 변하지 않는 것과 맺어라. 한마디로 구체적인 클래스보다 인터페이스나 추상클래스와 맺어라.

4. 객체지향 프로그래밍 키워드 설명해주세요(추상화 캡슐화 상속 다형성 등) :
추상화 -> 공통 속성이나 기능을 묶은것. 객체들이 어떤 특징들이 있다고 정의하는 설계.
캡슐화 -> 비슷한 기능의 객체들을 한곳에 모으고 분류. 은닉성으로 외부에서 접근못하도록 숨길 수 있음.
상속 -> 상위 부모클래스의 기능들을 가져와 재사용하면서 필요하다면 기능을 추가하거나 부모클래스의 기능을 재정의 함.
다형성 -> 재정의하는 오버라이딩이나 같은 매소드에 매개변수의 타입과 개수만 다르게 주는 오버로딩을 말함.

5. 어떤 코드가 클린 코드라고 생각하시나요? :
객체지향적으로 짠 코드. 하나의 기능이 작동하는데 핵심적인 것만 잘 넣어서 다른 부분이 잘못되어도 해당 기능이 동작하는데
큰 무리가 없을 정도로 안정적이고 독립적인 코드.

6. RESTful하다는 게 무엇이며 아는대로 설명해보세요 :
REST API 를 잘 실현한것을 REST ful 이라고 합니다. REST 하게 짜려면 제약들이 있습니다.
첫째로 클라이언트와 서버의 관계입니다. 클라이언트는 서버에서 일어나는 일에 대해 알 수 없고 알 필요도 없습니다.
따라서 서버와 클라이언트는 서로 독립적 입니다.
둘째로 Stateless 해야 합니다. 서버는 클라이언트의 세션상태나 정보를 저장하지 않으므로 클라이언트가 요청을 보낼 때
필요한 모든정보를 보내줘야 합니다.
셋째로 Cache로, 요청에 대한 응답 내의 데이터안에 요청한 모든 정보가 포함되어야 합니다. 보통 http Header의 
cache-control 헤더를 이용합니다.
넷째로 대부분의 서비스가 RESTful 하지 않다고 만드는 조건인 Uniform interface 입니다.
해당 조건에는 또 4가지 제약 조건이 있습니다. 그중 첫번째와 두번째 제약 조건을 요약하자면 
"URL로 지정한 리소스를 Http Method를 통해서 표현하고 구분한다" 입니다.
세번째와 네번째의 제약조건은 서로 연결되어 있습니다. 응답 메세지가 스스로에 대한 설명을 할 수 있어야 한다는 
내용입니다. API 명세서에 적는 내용이 그대로 응답 바디에 존재해야 한다는 것입니다. API 명세서 전체를 적지는 못해도
해당 명세서가 존재하는 곳을 알려줘야 하는데 이것을 어떻게 알려줘야 할까?
네번째 제약조건인 Hypermedia As The Engine Of Application State, 줄여서 HATEOAS에서 명시하는
하이퍼미디어인 링크를 통해 알려줘야 합니다.


7. Object에 대해서 설명해주세요 :
자바 최상위 클래스인 오브젝트 클래스는 자바에서 클래스를 선언할때 extends 키워드를 통해서
다른 클래스를 상속하지 않는다고 해도 암시적으로 java.lang.Object 클래스를 상속합니다.
모든 자바의 클래스는 Object 클래스의 자손이된다.

8. HTTP 메서드와 이것이 하는 역할을 설명해보세요 :
http 통신을 위한 요청 방법입니다. 
http 매서드는 대표적으로 GET/POST/PUT/DELETE 가 있습니다.
GET의 경우 요청에 바디나 컨텐츠타입을 넣지 않습니다. GET은 조회따위의 요청을 할때 사용합니다. idempotent 라는 
멱등성이 보장되어서 요청을 보내도 데이터를 변조시키지 않습니다. 또한 캐싱을 하기때문에 빠릅니다.
POST는 GET과는 반대로 멱등성이 적용되지 않는 데이터를 생성하는 요청입니다.
PUT은 POST와 유사하지만 데이터를 생성하는게 아니라 있던 데이터를 전부 업데이트 합니다.
DELETE 는 지정된 리소스를 삭제합니다.


9. CORS에 대해서 설명해보세요
10. TDD가 무엇인가요? 알고 있다면 TDD를 어떻게 생각하시나요?
11. 클래스에 대해 설명해보세요
12. String, StringBuffer, StringBuilder 차이점이 무엇인가요?