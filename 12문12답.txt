1. 객체지향이란 무엇인가요? :
프로그래머들이 프로그래밍을 더 쉽고 체계적으로 할 수 있는 방법론 입니다.
보다 적은 명령으로 다양한 것들을 묶음으로 캡슐화하여 일을 시킬 수 있게 하기 위해
상위 부모클래스를 둔다던가 인터페이스를 두고 이를 사용하게 합니다.

2. 객체지향 프로그래밍의 장점을 설명해주세요 :
묶음으로 체계화하고 상위 부모클래스나 인터페이스로 공통적인 부분을 처리하여
프로그래머가 매우 압축된 코딩을 할 수 있으며 객체지향의 장점인 은닉성으로
어딘가의 변화가 연쇄적으로 하위에 영향을 주지 않아서 유지보수가 쉽습니다.

3. 객체 지향적 설계 원칙이란? :
SOLID
단일책임원칙 : 모든 클래스는 하나의 책임만 가져야한다.
개방폐쇄원칙 : 기존 코드를 변경하지 않으면서 새로운 기능을 추가할 수 있어야한다.
리스코프치환원칙 : 자식클래스가 언제나 자신의 부모클래스를 대체할 수 있다.
인터페이스분리원칙 : 한 클래스는 사용하지 않는 인터페이스는 구현하지 말아야한다.
의존역전원칙 : 의존관계를 맺을 때 변화하기 쉽지 않고 자주 변하지 않는 것과 맺어라. 한마디로 구체적인 클래스보다 인터페이스나 추상클래스와 맺어라.

4. 객체지향 프로그래밍 키워드 설명해주세요(추상화 캡슐화 상속 다형성 등) :
추상화 -> 공통 속성이나 기능을 묶은것. 객체들이 어떤 특징들이 있다고 정의하는 설계.
캡슐화 -> 비슷한 기능의 객체들을 한곳에 모으고 분류. 은닉성으로 외부에서 접근못하도록 숨길 수 있음.
상속 -> 상위 부모클래스의 기능들을 가져와 재사용하면서 필요하다면 기능을 추가하거나 부모클래스의 기능을 재정의 함.
다형성 -> 재정의하는 오버라이딩이나 같은 매소드에 매개변수의 타입과 개수만 다르게 주는 오버로딩을 말함.

5. 어떤 코드가 클린 코드라고 생각하시나요? :
객체지향적으로 짠 코드. 하나의 기능이 작동하는데 핵심적인 것만 잘 넣어서 다른 부분이 잘못되어도 해당 기능이 동작하는데
큰 무리가 없을 정도로 안정적이고 독립적인 코드.

6. RESTful하다는 게 무엇이며 아는대로 설명해보세요 :
REST API 를 잘 실현한것을 REST ful 이라고 합니다. REST 하게 짜려면 제약들이 있습니다.
첫째로 클라이언트와 서버의 관계입니다. 클라이언트는 서버에서 일어나는 일에 대해 알 수 없고 알 필요도 없습니다.
따라서 서버와 클라이언트는 서로 독립적 입니다.
둘째로 Stateless 해야 합니다. 서버는 클라이언트의 세션상태나 정보를 저장하지 않으므로 클라이언트가 요청을 보낼 때
필요한 모든정보를 보내줘야 합니다.
셋째로 Cache로, 요청에 대한 응답 내의 데이터안에 요청한 모든 정보가 포함되어야 합니다. 보통 http Header의 
cache-control 헤더를 이용합니다.
넷째로 대부분의 서비스가 RESTful 하지 않다고 만드는 조건인 Uniform interface 입니다.
해당 조건에는 또 4가지 제약 조건이 있습니다. 그중 첫번째와 두번째 제약 조건을 요약하자면 
"URL로 지정한 리소스를 Http Method를 통해서 표현하고 구분한다" 입니다.
세번째와 네번째의 제약조건은 서로 연결되어 있습니다. 응답 메세지가 스스로에 대한 설명을 할 수 있어야 한다는 
내용입니다. API 명세서에 적는 내용이 그대로 응답 바디에 존재해야 한다는 것입니다. API 명세서 전체를 적지는 못해도
해당 명세서가 존재하는 곳을 알려줘야 하는데 이것을 어떻게 알려줘야 할까?
네번째 제약조건인 Hypermedia As The Engine Of Application State, 줄여서 HATEOAS에서 명시하는
하이퍼미디어인 링크를 통해 알려줘야 합니다.


7. Object에 대해서 설명해주세요 :
자바 최상위 클래스인 오브젝트 클래스는 자바에서 클래스를 선언할때 extends 키워드를 통해서
다른 클래스를 상속하지 않는다고 해도 암시적으로 java.lang.Object 클래스를 상속합니다.
모든 자바의 클래스는 Object 클래스의 자손이된다.


8. HTTP 메서드와 이것이 하는 역할을 설명해보세요 :
http 통신을 위한 요청 방법입니다. 
http 매서드는 대표적으로 GET/POST/PUT/DELETE 가 있습니다.
GET의 경우 요청에 바디나 컨텐츠타입을 넣지 않습니다. GET은 조회따위의 요청을 할때 사용합니다. idempotent 라는 
멱등성이 보장되어서 요청을 보내도 데이터를 변조시키지 않습니다. 또한 캐싱을 하기때문에 빠릅니다.
POST는 GET과는 반대로 멱등성이 적용되지 않는 데이터를 생성하는 요청입니다.
PUT은 POST와 유사하지만 데이터를 생성하는게 아니라 있던 데이터를 전부 업데이트 합니다.
DELETE 는 지정된 리소스를 삭제합니다.


9. CORS에 대해서 설명해보세요 :
교차 출처 자원 공유. SOP의 반대로 나온 개념입니다. 웹브라우저가 같은 출처가 아니면 보안을 위해
차단을 하는것입니다. 같은 출처란, 프로토콜+도메인+포트가 일치하는 경우를 말합니다.
오늘날에는 대부분이 서로 다른 출처의 자원을 요청하고 받기 때문에 이를 열어주기 위해 
교차 출처 자원 공유 개념이 필요합니다. 요청에는 몇가지가 있는데 그중 단순요청이라는게 있습니다.
GET 과같은 단순 조회 요청의 경우에 쓰이는 요청이며 이런 요청의 경우에는 CORS에서 단순요청으로
판단하고 막지 않습니다. 하지만 PUT/DELETE/POST 같은 멱등성을 해치거나 토큰 같은것을 사용하기위한
헤더값에 자원이 들어가는 경우에는 단순요청으로 보낼 수 없습니다. 자동으로 Preflight 요청으로 바뀌면서
요청을 보내도 되는지에 대한 사전 허가 요청을 보내게 되어있습니다. 해당 허가요청은 http 통신 매서드중에서
OPTIONS 매서드를 사용하여 허가요청을 보냅니다.


10. TDD가 무엇인가요? 알고 있다면 TDD를 어떻게 생각하시나요? :
test driven development. 디자인 -> 코드작성 -> 테스트 가 아니라
디자인 -> 테스트 -> 코드작성의 순서를 말합니다. 테스트코드를 먼저 작성하면서 일어날 수 있는
상황이나 고려해야될 상황들을 미리 정하면서 본코드를 어떻게 짜야할 지를 테스트를 통해 미리
접할 수 있으므로 확장성,안정성으로 매우 좋은 절차방법입니다. 다만 그렇게 함으로써 시간이 오래걸립니다.


11. 클래스에 대해 설명해보세요 :
객체지향언어에서 프로그래머가 다루기 쉬운 현실세계를 반영하기 위해 객체라는 개념을 도입했습니다.
클래스란 객체를 생성하기 위해 그 객체가 어떤 데이터를 갖고 어떤 연산을 하는지에 대해 정의합니다.
예를들어서 사람이라는 클래스에는 눈 코 입이 있다고하면 이를 실제로 메모리 상에 존재하게 인스턴스를
만들기 위해 생성자를 통해 만들면 찢어진눈,주먹코,작은입의 사람1. 큰눈,납작코,큰입 사람2 이런식으로 
다양한 객체가 만들어질 수 있습니다.


12. String, StringBuffer, StringBuilder 차이점이 무엇인가요?
String -> 처음 인스턴스화한 객체를 변경할 수 없습니다. 만약 재정의 하면 해당 메모리의 String은 힙영역에 있다가
가비지컬렉터에 의해 없어지고 재정의한다고 했던 String 은 사실 새로운 메모리에 할당됩니다.
StringBuffer -> 하나의 메모리에서 처리합니다. 만약 재정의하면 해당 메모리 내에서 기존 자원에 덮어씌워집니다. 
동기화를 지원하므로 멀티쓰레드 환경에서 안정성이 좋습니다.
StringBuilder -> StringBuffer와 동일하게 문자열을 같은 메모리 내에서 변경할 수 있습니다. 차이점이라면
동기화과정이 없기 때문에 멀티쓰레드 환경에서 안정성이 떨어집니다. 대신 단일 쓰레드 환경에서는 Stringbuffer 보다 성능이 좋습니다.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------





1. spring security란? :
스프링 프레임워크에서 지원하는 웹 보안 라이브러리 입니다.
필터를 이용해서 허가되지 않는 요청에 대해서 세션 방식으로 인증을 요구합니다.


2. 브라우저에서 서버 응답까지의 흐름을 아는대로 설명해보세요 :
클라이언트가 http 통신으로 요청합니다. 웹컨텍스트 수준의 정적 자원을 관리하는 Web Service 가 해당 요청을 받습니다.
아파치나 엔진엑스 같은게 있습니다. 웹서비스는 자바스크립트,css 같은 정적자원에 관련해서 처리합니다. 만약 동적자원에 관한게 있다면
Web Application Service 에게 이관합니다. 톰캣이 여기에 포함됩니다. 자원처리는 웹컨텍스트 수준의 서블릿 컨테이너의 서블릿 풀에서
각각의 서블릿들이 할당하여 처리합니다. 이제 서버로 보내야 하는데 중간에 필터를 거칩니다. 웹컨텍스트와 스프링 컨텍스트 사이에서
처리해야할 일들을 합니다. 스프링 시큐리티가 이 영역에서 이루어집니다. 
필터를 거친 요청은 스프링 컨텍스트 수준의 IoC 컨테이너로 들어갑니다. 디스페처 서블릿 이라고 하는 스프링의 서블릿 컨테이너가 있습니다.
여기에는 다양한 매서드들이 구현되어있는데, 대표적으로 핸들러 매핑, 핸들러 어댑터, 뷰리졸버 등이 있습니다. 핸들러 매핑은 컨트롤러를 매핑시켜주며
이렇게 매핑되면 핸들러 어댑터를 통해 요청이 갑니다. 컨트롤러,서비스,레파지토리를 타고 모델이 뷰로 전달되면 이 동적 리스폰스를 리턴해주는데
뷰리졸버를 통해 다시 웹컨텍스트 수준의 서블릿 컨테이너로 리턴됩니다. 역순으로 클라이언트에게 응답이 리턴됩니다.


3. (객체지향 관점에서) 스프링 프레임워크를 바라봤을 때 장단점이 무엇이라고 생각하시나요? :
인터페이스같은 추상화를 통해 다형성이 성립됩니다. 이는 객체지향관점에서 구체적으로 다양한
객체들을 생성한다는 역할과 구현을 구별지어서 서로 독립적으로 영향을 주지 않습니다. 
클라이언트를 변경하지않고 서버에서 객체 인스턴스를 실행 시점에 유연하게 변경할 수 있습니다.
하지만 반대로 다르게 말하면 인터페이스에 의존되어 있기 때문에 인터페이스에 변형이 가해진다면
그 밑으로 모든 구현체들에게도 영향을 끼칩니다.


4. jwt에 대해서 간략히 설명해주세요 :
자바 웹 토큰이라고 해서 서버에서 유저 정보를 저장하는 세션방식이 아닌 클라이언트가 쿠키에 자신의 정보를 담은 토큰을
갖고 있게 하여 인증이나 인가가 필요할 때 마다 해당 토큰을 서버에게 보내고 서버는 단순히 토큰을 해독하여 정보를 비교하게 
하는 인증/인가 방법입니다.


5. OAuth에 대해서 간략히 설명해주세요 :
제 3 서비스의 회원정보를 받아와서 사용할 수 있게 해주는 프로토콜 입니다. 


6. 오버라이딩과 오버로딩이 무엇이고 어떤 차이가 있는지 설명해보세요 :
우선 오버라이딩이란, 부모클래스가 있고 부모 클래스를 상속받은 자손 클래스에서 자신의 부모 클래스의 내용을 이어받아서 기능을 추가한다거나 변형을 가할 때 사용하는 것 입니다.
오버로딩이란, 동일 클래스 내에서 같은 이름의 매서드가 있고 매개변수의 개수나 종류가 다른것들을 말합니다.


7. 인스턴스에 대해 설명해보세요 :
소프트웨어 수준에서 실제로 메모리에 할당된 객체를 말합니다.


8. ‘인스턴스화 된다’라는게 무슨 의미인지 설명해보세요 :
메모리에 실제로 값을 할당한다는 뜻입니다. 클래스에서 실제로 구현체인 객체를 만들어내고 소프트웨어 환경에서 객체를 메모리에 할당하는것을 말합니다.


9. thread에 대해 아는대로 설명해보세요 :
실행중인 프로그램을 프로세스라고 합니다. 프로세스에는 실제로 일을 하는 메인 쓰레드가 존재합니다.
쓰레드가 여러개인 것을 멀티쓰레드라고 부릅니다.
결국 쓰레드는 실제로 작업을 수행하는 주체입니다.


10. process에 대해 아는대로 설명해보세요 :
프로세스(process)란 단순히 실행 중인 프로그램(program)이라고 할 수 있습니다.
즉, 사용자가 작성한 프로그램이 운영체제에 의해 메모리 공간을 할당받아 실행 중인 것을 말합니다.
이러한 프로세스는 프로그램에 사용되는 데이터와 메모리 등의 자원 그리고 스레드로 구성됩니다.


11. thread와 process의 차이를 설명할 수 있나? :
프로세스는 실행중인 프로그램으로, 실제로 운영체제에 의해 메모리공간을 할당 받아 실행중인 것을 말합니다.
이 프로세스는 프로그램에 사용되는 데이터와 메모리등의 자원 그리고 쓰레드로 구성됩니다.
쓰레드는 해당 프로그램의 일을 실제로 수행하는 주체입니다. 메인쓰레드가 항상 존재하고
만약 프로그램에서 여러 쓰레드를 지원하게되면 멀티쓰레드라고 부릅니다.


12. MVC에 대해서 설명해주세요 :
모델 뷰 컨트롤러의 이론입니다. 클라이언트의 요청이 컨트롤러를 통해 모델로 담겨서 처리되고 적절한 응답을 다시
컨트롤러에게 보내면 컨트롤러는 클라이언트에게 보여질 구성요소만을 배치해둔 뷰에게 해당 응답을 보내고
뷰는 단순히 응답을 자신이 만든 구성의 적절한 위치에 배치만 하여 클라이언트에게 보여줍니다.
이때 모델과 뷰는 서로에 대해서 모르며 컨트롤러에 대해서도 알지 못합니다. 컨트롤러는 중재자로써
모델과 뷰에대해서 어느정도 알고 있습니다.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



1. 제네릭이 무엇인가요? :
외부에 의해서 그 클래스가 정의됩니다. 정확히 어떤 클래스가 될지 상황에 따라 달라질 때 임시로 두는 클래스입니다.


2. 어노테이션에 대해 설명해보세요 :
실행과정에서 데이터를 어떻게 처리할 지에 대한 서브데이터 입니다.
코드 문법 에러 체크,코드 자동 생성 정보 제공,런타임 시 특정 기능을 실행하는 정보 제공 의 용도로 사용합니다.
커스텀하여 사용할 수도 있고 자바에서 제공하는 기본 어노테이션을 쓸 수도 있습니다.


★3. 컬렉션 클래스에서 제네릭을 사용하는 이유를 설명해보세요 :


4. 데드락이 무엇이고, 해결방법에 대해 설명해보세요 :
중복을 방지하기위해 DB 트렌젝션 락을 거는과정에서 서로가 작업을 위해 자신들을 잠그고
서로의 정보에 도달하려고 해서 영원히 둘 다 잠겨버리는 상황을 말합니다.
무한정 잠그기 보다는 잠그는 시간을 설정해 두는 것으로 해결할 수 있습니다.


5. JVM이 하는 역할이 무엇인가요? :
어떤 운영체제에서도 자바를 읽을 수 있게 메모리 할당요청, 자바 소스를 바이트코드로 컴파일 해주는 등의 역할을 합니다.


★6. 스프링에서 싱글톤 패턴에 대해 설명해보세요 :
싱글톤 패턴이란 객체를 하나만 생성하여 다른 곳에서 생성자를 통해 새로운 객체를 생성하지 못하게 막는 것으로
메모리를 아낄 수 있는 방법입니다. 스프링 컨테이너에서는 싱글턴 패턴을 적용하지 않아도 자동으로
객체 인스턴스를 싱글톤으로 관리해줍니다. 
싱글톤 패턴의 문제점으로는 
1.의존 관계상 클라이언트가 구체 클래스에 의존한다.
2.테스트하기 어렵다.
3.내부 속성을 변경하거나 초기화 하기 어렵다.
4.private 생성자로 자식 클래스를 만들기 어렵다.
등이 있는데 스프링 컨테이너 기능들 덕분에 이런 단점들을 해결하고 객체를 싱글톤으로 유지할 수 있습니다.


7. JPA에서 Entity를 설계할때 주의점이 무엇인가요? :
fetch 타입을 LAZY 타입으로 설정해서 필요하지 않은 하위 연관관계의 데이터를 참조하지 않게 해야 합니다.
EAGER 타입으로 한번의 요청으로 연관관계의 데이터까지 모두 불러내야하는 상황이라면 단방향으로
설정해서 순환참조를 일으키지 않게 해야합니다. 



8. DTO를 사용하는 이유에 대해 설명해보세요 :
DTO는 데이터 트랜스퍼 오브젝트의 약자로, 계층 간 데이터 전송을 위해 도메인 모델 대신 사용되는 객체입니다.
도메인을 직접 계층 간 전송에 사용하면 모델과 뷰가 강하게 결합될 수 있어서 뷰의 요구사항 변화로
도메인의 코드를 직접 변경해야 할 일이 생겨버립니다. 중간에 도메인 모델을 캡슐화하여 보호함으로써
이 결합을 느슨하게 만들 수 있습니다.



9. N+1 문제에 대해 짧게 설명해보세요 :
연관 관계에서 발생하는 이슈로, 연관 관계가 설정된 엔티티를 조회할 경우에 조회된 데이터 갯수(n) 만큼 연관관계의 조회 쿼리가 추가로 발생하여 데이터를 읽어오게 되는데, 이를 N+1 문제라고 합니다.

10. 생성자 injection을 사용하는 이유가 뭐라고 생각하시나요? :
@Autowired 의 편한 DI 주입방식인 필드 인젝션은 주입이 쉬우므로 하나의 클래스에 지나치게 많은 기능을 하게 될 수 있어서
단일책임원칙을 위배하게 됩니다. 이에 반해서 컨스트럭터 인젝션은 의존성을 주입해야 하는 대상이 많아질수록
생성자의 인자가 늘어나므로 이는 의존관계의 복잡성을 쉽게 파악할 수 있도록 도와주므로
리펙토링의 실마리를 제공합니다.
또한 필드인젝션은 객체를 생성하고 의존성을 Reflection 으로 주입받기 때문에 필드 변수를 Immutable(불변성) 으로 선언할 수 없습니다.
그에 반해 컨스트럭터 인젝션은 필드를 final 로 선언할 수 있기 때문에 필드의 변경에 대해서 안전합니다. 이는 객체의 변경에 따른
비용을 절약할 수 있도록 도와줍니다.

11. Bean이란?
스프링 IoC 컨테이너에서 관리하는 자바의 객체입니다.
좀더 자세하게 설명해주시겠어요?-> IoC 에 의해서 클래스 A에 필요한 클래스 B를 얻기위해
A 에서 B를 new를 통해 만들지 않고 스프링에 의하여 관리당하는 자바객체인 Bean을 사용합니다.


12. 직렬화(serialization)가 무엇인지 설명해보세요 :
객체의 직렬화는 객체의 내용을 바이트 단위로 변환하여 파일 또는 네트워크를 통해서 스트림(송수신)이 가능하도록 하는 것을 의미합니다.
자바의 I/O 처리는, 정수, 문자열 바이트 단위의 처리만 지원했었습니다. 따라서 복잡한 내용을 저장/복원 하거나, 
네트워크로 전송하기 위해서는 객체의 멤버변수의 각 내용을 일정한 형식으로 만들어(이것을 패킷이라고 한다) 전송해야 했습니다.
객체직렬화는 객체의 내용(구체적으로는 멤버변수의 내용)을 자바 I/O가 자동적으로 바이트 단위로 변환하여, 저장/복원하거나 
네트워크로 전송할 수 있도록 기능을 제공해준다. 즉 개발자 입장에서는 객체가 아무리 복잡하더라도, 객체직렬화를 이용하면 
객체의 내용을 자바 I/O가 자동으로 바이트 단위로 변환하여 저장이나 전송을 해주게 된다. 



1. 스프링에서 AOP가 무엇인가요? :
관점지향 프로그램으로서 객체지향과 비슷합니다. 핵심기능과 주변 부가기능으로 나누어서 부가기능을
따로 매서드로 빼서 모듈화하여 관리하는 것을 말합니다. 어느 타이밍에 부가기능을 넣을건지, 어디에 넣을건지를
설정해서 디렉토리패키지,클래스,매서드,클래스 단위로 전체 설정도 가능합니다.


2. 스프링에서 OOP가 무엇인가요? :
스프링에서는 SOLID 에 따라서 객체지향합니다.
SRP(single relational principle) -> 하나의 클래스는 하나의 책임만 가져야 한다.
OCP(open closed principle) -> 기능 확장에 대해서는 가능하지만 변경에 대해서는 막혀있어야 한다.
LSP(liskov substitution principle) -> 인터페이스 구현체는 인터페이스의 내용을 잘 따라야 한다.
ISP(interface segregation principle) -> 포괄적인 하나의 인터페이스보다 구체적인 인터페이스를 여러개 두는 것이 더 좋다.
DIP(dependency inversion principle) -> 추상화에 의존해야지, 구체화에 의존하면 안된다. 구현클래스말고 인터페이스에 의존하라는 뜻


3. 스프링 DI에 대해 아는대로 말씀해주세요 :
의존도를 낮추기 위해 다형성을 활용한 인터페이스를 통해 구현체 생성하기가 있고 이를 빈으로 등록하여
외부에서 생성된 객체를 매개변수로 받아옵니다. 스프링에서는 IoC 컨테이너가 스프링에서의 자바객체인 빈을
생성,관리하고 의존도 주입인 DI 의 여러 방식을 사용합니다.
스프링 DI에는 필드인젝션,컨스트럭터인젝션,세터인젝션이 있습니다.
필드인젝션은 오토와이어드 어노테이션을 활용한 빈 등록과 리플렉션으로 의존성을 주입받습니다. 의존도 주입이 굉장히 편하고 쉽습니다.
컨스트럭터 인젝션은 의존도를 주입할 때마다 생성자의 매개변수로서 늘어나는 형태입니다. 프로그래머가 의존관계를 보기 편하다는 장점과 final 필드에 의한 불변성을 보장할 수 있다는 장점이 있습니다.
세터인젝션은 Setter를 사용하여 의존관계를 주입합니다. 세터 인젝션은 컨스트럭터 인젝션과는 다르게 주입받는 객체가 변경될 가능성이 있는 경우에 사용합니다.


4. IOC가 무엇인가요? :
제어의 역전입니다. 클래스 A에서 클래스 B의 내용이 필요하다고 A내에서 new를 통해B를 생성해서 서로의 의존도가 높아지는것이 아니라, 인터페이스 같은것을 활용한
다형성을 지켜내어 빈을 통해 외부에서 의존도를 주입하게 하여 A 내에서는 외부에서 만든 객체만을 받아와 사용합니다. 이렇게 함으로써 A와B의 의존도를 낮출 수 있고
객체지향적으로 변화에 유연하게 대처할 수 있습니다.


5. XSS 에 대해 설명해주세요 :
Cross-site Scripting 의 약자로, 웹 사이트에 스크립트를 심어서 클라이언트가 웹을 방문하면 해당 스크립트를 수행하게하여
쿠키의 민감한 정보나 인터넷 사용기록들을 갈취하는 공격입니다. 공격 방법에 따라 Stored XSS와 Reflected XSS로 나뉘는데 
Stored XSS는 스크립트가 서버에 저장되는 방식이고 Reflected XSS URI 파라미터에 스크립트를 넣어서 서버에 저장하지않고
즉시 스크립트를 만들어내는 공격방식 입니다. 이름처럼 보통 자바스크립트를 이용합니다.
이와 비슷한 CSRF는 스크립트를 수행하게 하는 XSS와는 다르게 어떤 행동을 수행하도록 하는 공격방식입니다.


6. XSS 를 막기 위해서는 어떤 방법이 있는지? :
쿠키보안옵션을 사용하거나 알수없는 스크립트가 실행되는것을 웹 설정으로 막아줘야합니다.
또한 신뢰할 수 없는 사이트나 수상한 메일을 열람하지 않습니다.
웹서비스에서는 사용자의 입력값을 제한하여 스크립트를 삽입하지 못하게 막습니다.
또는 입력값을 Html entity인 문자참조로 치환 필터링하여 알아보기 어렵게 만듭니다.


7. 가비지컬렉션이란 무엇인가요? :
Runtime Data Area 그러니까 JVM이 운영체제로 부터 할당받은 메모리영역에서
힙영역에 해당하는 부분의 쓰이지 않는 메모리를 치워줍니다.
메모리가 쌓이면 프로그램이 멈춰버리므로 가비지컬렉터가 주기적으로 쓰이지 않는
메모리를 정리해줘야 합니다.


★8. 자바 컬렉션 List, set, map에 대해 설명해보세요 :
List -> 순서가 있고 인덱스로 원소접근 가능. 크기가 가변적임. 중복허용
set -> 데이터의 집합이므로 순서가 없고 중복을 허용하지 않음.
map -> key 와 value 형태 한쌍으로 이루어진 데이터 집합. key 에 대한 중복이 없으며 순서가 없음.
(https://cocoon1787.tistory.com/527)


9. 트래픽 급증으로 장애가 발생하면 어떻게 대응해야 하나요? :
단순히 서버의 량을 늘리는 scale-out 방법으로 트래픽을 분산할 수 있습니다.
또는 서버의 성능을 올리는 scale-up 방법으로 대응할 수 있는 트래픽 량을 늘릴 수 있습니다.
엔진엑스 같은 웹서버를 사용하여 멀티 쓰레드 환경에서 빠르게 트래픽을 감당해내는 방법도 있습니다.


10. WAS와 WS가 어떻게 다른가요?
웹서버는 정적 자원을 다룹니다. css 자바스크립트 같은 것들입니다.
웹 어플리케이션 서버는 동적 자원을 다룹니다.


11. 자바의 최상위 부모클래스가 무엇인지 설명해보세요 :
Object 클래스입니다. 모든 클래스가 object 클래스를 기본적으로 상속하고 오버라이딩을 통해 사용합니다.



12. 영속성 컨텍스트란, 영속성 컨텍스트가 있음으로 인한 장점은?